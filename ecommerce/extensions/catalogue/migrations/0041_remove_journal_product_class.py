# -*- coding: utf-8 -*-
# Generated by Django 1.11.21 on 2019-07-10 14:50
from __future__ import unicode_literals

from django.db import migrations

from oscar.core.utils import slugify

# This is the reversal of 0032_journal_product_class. The journal product is being removed

JOURNAL_PRODUCT_CLASS_NAME = 'Journal'
JOURNAL_SLUG_NAME = slugify(JOURNAL_PRODUCT_CLASS_NAME)


class Migration(migrations.Migration):
    def remove_product_class(apps, schema_editor):
        """ Removes journal product class"""
        Category = apps.get_model("catalogue", "Category")
        Product = apps.get_model('catalogue', 'Product')
        ProductAttribute = apps.get_model("catalogue", "ProductAttribute")
        ProductClass = apps.get_model("catalogue", "ProductClass")

        # ProductAttribute is required here for the cascading delete
        for klass in (Category, Product, ProductClass, ProductAttribute):
            klass.skip_history_when_saving = True

        Product.objects.filter(product_class=ProductClass.objects.get(name=JOURNAL_PRODUCT_CLASS_NAME)).delete()
        Category.objects.filter(slug=JOURNAL_SLUG_NAME).delete()
        ProductClass.objects.filter(name=JOURNAL_PRODUCT_CLASS_NAME).delete()

    def readd_product_class(apps, schema_editor):
        """ Adds the journal product class back """
        Category = apps.get_model("catalogue", "Category")
        Product = apps.get_model('catalogue', 'Product')
        ProductAttribute = apps.get_model("catalogue", "ProductAttribute")
        ProductClass = apps.get_model("catalogue", "ProductClass")

        for klass in (Category, Product, ProductClass, ProductAttribute):
            klass.skip_history_when_saving = True

        # Create a new product class for journal
        journal = ProductClass(
            track_stock=False,
            requires_shipping=False,
            name=JOURNAL_PRODUCT_CLASS_NAME,
            slug=JOURNAL_SLUG_NAME
        )
        journal.save()

        # Create product attributes for journal products
        pa1 = ProductAttribute.objects.create(
            product_class=journal,
            name="UUID",
            code="UUID",
            type="text",
            required=True
        )
        pa1.save()

        # Create a category for the journal
        Category.add_root(
            description="All journals",
            slug="journals",
            image="",
            name="Journals"
        )


    dependencies = [
        ('catalogue', '0040_historicalcategory_historicaloption_historicalproductattribute_historicalproductcategory_historicalp'),
    ]

    operations = [
        migrations.RunPython(remove_product_class, readd_product_class),
    ]
